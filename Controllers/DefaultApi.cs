/*
 * POVERKA API
 *
 * This is a Poverka  API aka ASUKMO
 *
 * OpenAPI spec version: 1.0.0
 * Contact: imail.for.iwork@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http;
using Microsoft.AspNetCore.WebUtilities;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Primitives;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using poverka.Attributes;
using poverka.Models;

namespace poverka.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    public class DefaultApiController : Controller
    { 
        /// <summary>
        /// create new  MI
        /// </summary>
        /// <remarks>creates new MeasurmentInstrument</remarks>
        /// <param name="mi">create new MI</param>
        /// <response code="201">Created</response>
        /// <response code="400">bad request</response>
        [HttpPost]
        [Route("/api/v1/poverka/mi")]
        [ValidateModelState]
        [SwaggerOperation("CreateNewMI")]
        [SwaggerResponse(201, typeof(string), "Created")]
        [SwaggerResponse(400, typeof(ErrorMessage), "Bad Request")]
        public virtual IActionResult CreateNewMI([FromBody]MeasurngInstrument mi)
        { 
            throw new NotImplementedException();
//            return new ObjectResult(new MeasurngInstrument());
        }

        /// <summary>
        /// get Employess mached by term
        /// </summary>
        /// <remarks>get Employess mached by term</remarks>
        /// <param name="id"></param>
        /// <param name="tenantid"></param>
        /// <param name="name"></param>
        /// <param name="lastname"></param>
        /// <param name="thirdname"></param>
        /// <response code="200">OK</response>
        /// <response code="400">Bad Request</response>
        [HttpGet]
        [Route("/api/v1/poverka/employee")]
        [ValidateModelState]
        [SwaggerOperation("EmployeeGet")]
        [SwaggerResponse(200, typeof(List<Employee>), "OK")]
        [SwaggerResponse(400, typeof(ErrorMessage), "Bad Request")]
        public virtual IActionResult EmployeeGet([FromQuery]int? id, [FromQuery]int? tenantid, [FromQuery]string name, [FromQuery]string lastname, [FromQuery]string thirdname)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<Employee>>(exampleJson)
            : default(List<Employee>);
            return new ObjectResult(example);
        }

        /// <summary>
        /// delete Employee by id
        /// </summary>
        /// <remarks>delete Employee by id</remarks>
        /// <param name="id"></param>
        /// <response code="200">OK</response>
        /// <response code="204">No Content. No math found for is id</response>
        /// <response code="400">Bad Request</response>
        [HttpDelete]
        [Route("/api/v1/poverka/employee/{id}")]
        [ValidateModelState]
        [SwaggerOperation("EmployeeIdDelete")]
        [SwaggerResponse(200, typeof(string), "Ok")]
        [SwaggerResponse(204, typeof(ErrorMessage), "No Content")]
        [SwaggerResponse(400, typeof(ErrorMessage), "Bad Request")]
        public virtual void EmployeeIdDelete([FromRoute]int? id)
        { 
            throw new NotImplementedException();
        }

        /// <summary>
        /// get Employee by id
        /// </summary>
        /// <remarks>get Employee by id</remarks>
        /// <param name="id"></param>
        /// <response code="200">OK</response>
        /// <response code="204">No Content. No math found for is id</response>
        /// <response code="400">Bad Request</response>
        [HttpGet]
        [Route("/api/v1/poverka/employee/{id}")]
        [ValidateModelState]
        [SwaggerOperation("EmployeeIdGet")]
        [SwaggerResponse(200, typeof(Employee), "OK")]
        [SwaggerResponse(204, typeof(ErrorMessage), "No Content. No math found for is id")]
        [SwaggerResponse(400, typeof(ErrorMessage), "Bad Request")]
        public virtual IActionResult EmployeeIdGet([FromRoute]int? id)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Employee>(exampleJson)
            : default(Employee);
            return new ObjectResult(example);
        }

        /// <summary>
        /// create bunch of Employess
        /// </summary>
        /// <remarks>create bunch of Employess</remarks>
        /// <param name="employess"></param>
        /// <response code="200">OK</response>
        /// <response code="400">Bad Request</response>
        /// <response code="409">Conflict</response>
        /// <response code="422">Unprocessable Entity. Not created one or more Employess</response>
        [HttpPost]
        [Route("/api/v1/poverka/employee")]
        [ValidateModelState]
        [SwaggerOperation("EmployeePost")]
        [SwaggerResponse(200, typeof(string), "Ok")]
        [SwaggerResponse(400, typeof(ErrorMessage), "Bad Request")]
        [SwaggerResponse(409, typeof(ErrorMessage), "Conflict")]
        [SwaggerResponse(422, typeof(ErrorMessage), "Unprocessable Entity")]
        public virtual IActionResult EmployeePost([FromBody]List<Employee> employess)
        { 
            throw new NotImplementedException();
        }

        /// <summary>
        /// get all MI
        /// </summary>
        /// <remarks>get all available MI&#x60;s</remarks>
        /// <param name="id">id of MI, get a single MI</param>
        /// <param name="name">get by MI name</param>
        /// <param name="type">get MI by type</param>
        /// <param name="dateStart">start date of time period (if empty, get Records from all the time)</param>
        /// <param name="dateEnd">date of end a time period (if empty, get now date)</param>
        /// <param name="term">get by search term</param>
        /// <response code="200">OK</response>
        /// <response code="400">Bad Request</response>
        /// <response code="404">Not Found. No one MI by search params is found</response>
        [HttpGet]
        [Route("/api/v1/poverka/mi")]
        [ValidateModelState]
        [SwaggerOperation("GetAllMI")]
        [SwaggerResponse(200, typeof(List<MeasurngInstrument>), "OK")]
        [SwaggerResponse(400, typeof(ErrorMessage), "Bad Request")]
        [SwaggerResponse(404, typeof(ErrorMessage), "Not Found. No one MI by search params is found")]
        public virtual IActionResult GetAllMI([FromQuery]int? id, [FromQuery]string name, [FromQuery]string type, [FromQuery]string dateStart, [FromQuery]string dateEnd, [FromQuery]string term)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<MeasurngInstrument>>(exampleJson)
            : default(List<MeasurngInstrument>);
            return new ObjectResult(example);
        }

        /// <summary>
        /// login to app
        /// </summary>
        /// <remarks>send login/pass encrypted to secret string, rturns a secret X-Auth-Token</remarks>
        /// <response code="200">OK</response>
        /// <response code="400">Bad Request</response>
        [HttpPost]
        [Route("/api/v1/poverka/login")]
        [ValidateModelState]
        [SwaggerOperation("LoginPost")]
        [SwaggerResponse(200, typeof(Token), "OK")]
        [SwaggerResponse(400, typeof(ErrorMessage), "Bad Request")]
        public virtual IActionResult LoginPost()
        {
            FrameRequestHeaders headers = (FrameRequestHeaders)Request.Headers;
            if (headers.HeaderAuthorization.Count == 0 || headers.HeaderAuthorization.Count > 1)
            {
                Response.StatusCode = 400;
                return new ObjectResult(new ErrorMessage(){Code = "400", Message = "Auth header error"});
            }

            var ass = headers.HeaderAuthorization[0];
            
            return new ObjectResult(new Token(){_Token = "azaza"});

//            string exampleJson = null;
//            
//            var example = exampleJson != null
//            ? JsonConvert.DeserializeObject<Token>(exampleJson)
//            : default(Token);
//            return new ObjectResult(example);
        }

        /// <summary>
        /// delete MI by id
        /// </summary>
        /// <remarks>delete MI by id</remarks>
        /// <param name="id">id MI for delete</param>
        /// <response code="200">OK</response>
        /// <response code="400">Bad Request</response>
        /// <response code="404">Not Found. Not found MI for delete</response>
        [HttpDelete]
        [Route("/api/v1/poverka/mi")]
        [ValidateModelState]
        [SwaggerOperation("MiDelete")]
        [SwaggerResponse(200, typeof(string), "Ok")]
        [SwaggerResponse(400, typeof(ErrorMessage), "Bad Request")]
        [SwaggerResponse(404, typeof(ErrorMessage), "Not Found")]
        public virtual IActionResult MiDelete([FromQuery]int? id)
        { 
            throw new NotImplementedException();
        }

        /// <summary>
        /// update MI
        /// </summary>
        /// <remarks>update MI</remarks>
        /// <param name="mi">create new MI</param>
        /// <response code="202">Accepted</response>
        /// <response code="400">bad request</response>
        /// <response code="404">Not Found. Not found MI for update</response>
        [HttpPut]
        [Route("/api/v1/poverka/mi")]
        [ValidateModelState]
        [SwaggerOperation("MiPut")]
        [SwaggerResponse(202, typeof(string), "Accepted")]
        [SwaggerResponse(400, typeof(ErrorMessage), "Bad Request")]
        [SwaggerResponse(404, typeof(ErrorMessage), "Not Found")]
        public virtual IActionResult MiPut([FromBody]MeasurngInstrument mi)
        { 
            throw new NotImplementedException();
        }

        /// <summary>
        /// delete Record
        /// </summary>
        /// <remarks>delete Record</remarks>
        /// <param name="id">id of Record, delete a single Record</param>
        /// <param name="miid">id of MI, delete all Records of this MI</param>
        /// <param name="dateStart">start date of time period (if empty, get Records from all the time)</param>
        /// <param name="dateEnd">end date of time period (if empty )</param>
        /// <param name="term">asas</param>
        /// <response code="200">OK</response>
        /// <response code="400">Bad Request</response>
        [HttpDelete]
        [Route("/api/v1/poverka/record")]
        [ValidateModelState]
        [SwaggerOperation("RecordDelete")]
        [SwaggerResponse(200, typeof(string), "OK")]
        [SwaggerResponse(400, typeof(ErrorMessage), "Bad Request")]
        public virtual IActionResult RecordDelete([FromQuery]int? id, [FromQuery]int? miid, [FromQuery]string dateStart, [FromQuery]string dateEnd, [FromQuery]string term)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<int?>(exampleJson)
            : default(int?);
            return new ObjectResult(example);
        }

        /// <summary>
        /// get records by query
        /// </summary>
        /// <remarks>get MI Records of poverka by some parameters</remarks>
        /// <param name="id">id of Record, get a single Record</param>
        /// <param name="miid">id of MI, get all Records of this MI</param>
        /// <param name="dateStart">start date of time period (if empty, get Records from all the time)</param>
        /// <param name="dateEnd">sd</param>
        /// <param name="term">term for search record</param>
        /// <response code="200">OK</response>
        /// <response code="400">Bad Request</response>
        /// <response code="404">Not Found. No one Record found by query params</response>
        [HttpGet]
        [Route("/api/v1/poverka/record")]
        [ValidateModelState]
        [SwaggerOperation("RecordGet")]
        [SwaggerResponse(200, typeof(List<Record>), "OK")]
        [SwaggerResponse(400, typeof(ErrorMessage), "Bad Request")]
        [SwaggerResponse(404, typeof(ErrorMessage), "Not Found. No one Record found by query params")]
        public virtual IActionResult RecordGet([FromQuery]int? id, [FromQuery]int? miid, [FromQuery]string dateStart, [FromQuery]string dateEnd, [FromQuery]string term)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<Record>>(exampleJson)
            : default(List<Record>);
            return new ObjectResult(example);
        }

        /// <summary>
        /// delete Record by id
        /// </summary>
        /// <remarks>delete Record by id</remarks>
        /// <param name="id">id of Record</param>
        /// <response code="200">OK</response>
        /// <response code="400">Bad Request</response>
        /// <response code="404">Not Found. Not found Record by this id for delete</response>
        [HttpDelete]
        [Route("/api/v1/poverka/record/{id}")]
        [ValidateModelState]
        [SwaggerOperation("RecordIdDelete")]
        [SwaggerResponse(200, typeof(string), "Ok")]
        [SwaggerResponse(400, typeof(ErrorMessage), "Bad Request")]
        [SwaggerResponse(404, typeof(ErrorMessage), "Not Found")]
        public virtual IActionResult RecordIdDelete([FromRoute]int? id)
        { 
            throw new NotImplementedException();
        }

        /// <summary>
        /// get record by id
        /// </summary>
        /// <remarks>get record by id</remarks>
        /// <param name="id">id of Record</param>
        /// <response code="200">OK</response>
        /// <response code="400">Bad Request</response>
        /// <response code="404">Not Found. Not found Record by this id</response>
        [HttpGet]
        [Route("/api/v1/poverka/record/{id}")]
        [ValidateModelState]
        [SwaggerOperation("RecordIdGet")]
        [SwaggerResponse(200, typeof(Record), "OK")]
        [SwaggerResponse(400, typeof(ErrorMessage), "Bad Request")]
        [SwaggerResponse(404, typeof(ErrorMessage), "Not Found. Not found Record by this id")]
        public virtual IActionResult RecordIdGet([FromRoute]int? id)
        { 
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Record>(exampleJson)
            : default(Record);
            return new ObjectResult(example);
        }

        /// <summary>
        /// add Record to MI
        /// </summary>
        /// <remarks>add Record to MI by miid</remarks>
        /// <param name="record"></param>
        /// <response code="201">Created</response>
        /// <response code="400">Bad Request</response>
        /// <response code="409">Conflict</response>
        [HttpPost]
        [Route("/api/v1/poverka/record")]
        [ValidateModelState]
        [SwaggerOperation("RecordPost")]
        [SwaggerResponse(201, typeof(string), "Created")]
        [SwaggerResponse(400, typeof(ErrorMessage), "Bad Request")]
        [SwaggerResponse(409, typeof(ErrorMessage), "Conflict")]
        public virtual IActionResult RecordPost([FromBody]Record record)
        { 
            throw new NotImplementedException();
        }

        /// <summary>
        /// update Record
        /// </summary>
        /// <remarks>update Record</remarks>
        /// <param name="record"></param>
        /// <response code="202">Accepted</response>
        /// <response code="400">Bad Request</response>
        /// <response code="404">Not Found</response>
        /// <response code="409">Conflict</response>
        [HttpPut]
        [Route("/api/v1/poverka/record")]
        [ValidateModelState]
        [SwaggerOperation("RecordPut")]
        [SwaggerResponse(202, typeof(string), "Accepred")]
        [SwaggerResponse(400, typeof(ErrorMessage), "Bad Request")]
        [SwaggerResponse(404, typeof(ErrorMessage), "Not Found")]
        [SwaggerResponse(409, typeof(ErrorMessage), "Conflict")]
        public virtual IActionResult RecordPut([FromBody]Record record)
        { 
            throw new NotImplementedException();
        }
    }
}
